// <auto-generated />
using System;
using AlphaMetrixForms.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AlphaMetrixForms.Data.Migrations
{
    [DbContext(typeof(FormsContext))]
    [Migration("20200528145057_SeederAdded3")]
    partial class SeederAdded3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AlphaMetrixForms.Data.Entities.DocumentQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FileNumberLimit")
                        .HasColumnType("int");

                    b.Property<int>("FileSizeLimit")
                        .HasColumnType("int");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("DocumentQuestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("078f9ce9-8a39-4355-a6c5-de5282df4dce"),
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 237, DateTimeKind.Utc).AddTicks(6690),
                            FileNumberLimit = 2,
                            FileSizeLimit = 100,
                            FormId = new Guid("8a50ab5f-0eb5-4eaa-916e-dc241a19a3ed"),
                            IsDeleted = false,
                            IsRequired = true,
                            OrderNumber = 2,
                            Text = "Please upload your ID:"
                        },
                        new
                        {
                            Id = new Guid("75b93e1d-2219-43da-b2d8-f5b985112e43"),
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 237, DateTimeKind.Utc).AddTicks(6759),
                            FileNumberLimit = 1,
                            FileSizeLimit = 100,
                            FormId = new Guid("8a50ab5f-0eb5-4eaa-916e-dc241a19a3ed"),
                            IsDeleted = false,
                            IsRequired = true,
                            OrderNumber = 3,
                            Text = "Please upload your Token paper certificate:"
                        },
                        new
                        {
                            Id = new Guid("5065d44a-992d-4328-bcf9-56a3f49581d9"),
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 237, DateTimeKind.Utc).AddTicks(6764),
                            FileNumberLimit = 10,
                            FileSizeLimit = 1000,
                            FormId = new Guid("8a50ab5f-0eb5-4eaa-916e-dc241a19a3ed"),
                            IsDeleted = false,
                            IsRequired = false,
                            OrderNumber = 4,
                            Text = "Additional documents for upload:"
                        },
                        new
                        {
                            Id = new Guid("a08236d6-1576-4780-98ec-b00b470a5b1e"),
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 237, DateTimeKind.Utc).AddTicks(6768),
                            FileNumberLimit = 1,
                            FileSizeLimit = 1,
                            FormId = new Guid("aa5a5180-9201-41bf-9241-7a3918f4bf5c"),
                            IsDeleted = false,
                            IsRequired = true,
                            OrderNumber = 1,
                            Text = "Q1:"
                        },
                        new
                        {
                            Id = new Guid("ad686787-e762-4b05-aa40-bab8f8deb4c0"),
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 237, DateTimeKind.Utc).AddTicks(6771),
                            FileNumberLimit = 10,
                            FileSizeLimit = 10,
                            FormId = new Guid("aa5a5180-9201-41bf-9241-7a3918f4bf5c"),
                            IsDeleted = false,
                            IsRequired = false,
                            OrderNumber = 2,
                            Text = "Q2:"
                        });
                });

            modelBuilder.Entity("AlphaMetrixForms.Data.Entities.DocumentQuestionAnswer", b =>
                {
                    b.Property<Guid>("DocumentQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentQuestionId", "ResponseId");

                    b.HasIndex("ResponseId");

                    b.ToTable("DocumentQuestionAnswers");
                });

            modelBuilder.Entity("AlphaMetrixForms.Data.Entities.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Forms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a50ab5f-0eb5-4eaa-916e-dc241a19a3ed"),
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 237, DateTimeKind.Utc).AddTicks(881),
                            Description = "Questionnaire initiated by TestBank in order to improve their services.",
                            IsClosed = false,
                            IsDeleted = false,
                            OwnerId = new Guid("e067376a-2d4d-416f-b3a3-2f37dae1ad8f"),
                            Title = "Banking Services"
                        },
                        new
                        {
                            Id = new Guid("b41ba95b-e19f-4ed6-b443-6c85cf9b5c3d"),
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 237, DateTimeKind.Utc).AddTicks(1322),
                            IsClosed = false,
                            IsDeleted = false,
                            OwnerId = new Guid("e067376a-2d4d-416f-b3a3-2f37dae1ad8f"),
                            Title = "Test Question Test"
                        },
                        new
                        {
                            Id = new Guid("aa5a5180-9201-41bf-9241-7a3918f4bf5c"),
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 237, DateTimeKind.Utc).AddTicks(1336),
                            IsClosed = false,
                            IsDeleted = false,
                            OwnerId = new Guid("e067376a-2d4d-416f-b3a3-2f37dae1ad8f"),
                            Title = "Document Question Test"
                        },
                        new
                        {
                            Id = new Guid("eff4ce9b-6a32-47a4-8e5e-d7d89ca18446"),
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 237, DateTimeKind.Utc).AddTicks(1341),
                            IsClosed = false,
                            IsDeleted = false,
                            OwnerId = new Guid("e067376a-2d4d-416f-b3a3-2f37dae1ad8f"),
                            Title = "Option Question Test"
                        });
                });

            modelBuilder.Entity("AlphaMetrixForms.Data.Entities.Option", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5ff0344-94c4-48fe-9211-8c34e43c9a7e"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("02627001-cae2-4189-a774-5f2b1876f37c"),
                            Text = "less than 1 year"
                        },
                        new
                        {
                            Id = new Guid("b3ba569b-123e-4f16-9298-3dbe5720207c"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("02627001-cae2-4189-a774-5f2b1876f37c"),
                            Text = "1-3 years"
                        },
                        new
                        {
                            Id = new Guid("7a36b91e-9454-43cb-8e58-93d493b849ad"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("02627001-cae2-4189-a774-5f2b1876f37c"),
                            Text = "3-5 years"
                        },
                        new
                        {
                            Id = new Guid("d626cd57-2076-4494-9765-be883e0292de"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("02627001-cae2-4189-a774-5f2b1876f37c"),
                            Text = "more than 5 years"
                        },
                        new
                        {
                            Id = new Guid("c542a866-9b62-4629-8e69-84c4394104c4"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("29413352-774c-4cf4-8093-c0b733a95194"),
                            Text = "Debit Card"
                        },
                        new
                        {
                            Id = new Guid("1f747c49-83d1-4e12-93a4-d4fb94366d3d"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("29413352-774c-4cf4-8093-c0b733a95194"),
                            Text = "Credit Card"
                        },
                        new
                        {
                            Id = new Guid("b73ca574-f326-4bc6-80dc-038ea561ab33"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("29413352-774c-4cf4-8093-c0b733a95194"),
                            Text = "Current account"
                        },
                        new
                        {
                            Id = new Guid("40b0b5ca-f281-4919-b323-26ab2b84d720"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("29413352-774c-4cf4-8093-c0b733a95194"),
                            Text = "Overdraft"
                        },
                        new
                        {
                            Id = new Guid("0b8a2599-2e62-4d2c-aca8-cc6c2a43bab1"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("29413352-774c-4cf4-8093-c0b733a95194"),
                            Text = "Short-term Loan"
                        },
                        new
                        {
                            Id = new Guid("c47a949d-e300-4354-b22e-a1615bc6f1a3"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("29413352-774c-4cf4-8093-c0b733a95194"),
                            Text = "Long-term Loan"
                        },
                        new
                        {
                            Id = new Guid("85662798-ac15-45c7-96fb-50e77de9d526"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("29413352-774c-4cf4-8093-c0b733a95194"),
                            Text = "Mortgage"
                        },
                        new
                        {
                            Id = new Guid("a7a8b2ac-d48a-4e48-98db-2ac2eacb507a"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("29413352-774c-4cf4-8093-c0b733a95194"),
                            Text = "Savings account"
                        },
                        new
                        {
                            Id = new Guid("bd0ca49f-c7c3-4401-a225-16d025b13f9b"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("29413352-774c-4cf4-8093-c0b733a95194"),
                            Text = "E-Banking"
                        },
                        new
                        {
                            Id = new Guid("99c6498b-e76f-496a-9e2b-beb3e36eb6b6"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("29413352-774c-4cf4-8093-c0b733a95194"),
                            Text = "Other"
                        },
                        new
                        {
                            Id = new Guid("cc936706-63b9-4830-95ff-c108a71e13f3"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("69b16a6e-75c5-456a-ac2b-bdf94753b112"),
                            Text = "Yes"
                        },
                        new
                        {
                            Id = new Guid("ca610326-8825-465a-bf9e-634ddbdcaaad"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("69b16a6e-75c5-456a-ac2b-bdf94753b112"),
                            Text = "No"
                        },
                        new
                        {
                            Id = new Guid("80a8e086-9592-4760-bd5b-a1a0ebf6a624"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("69b16a6e-75c5-456a-ac2b-bdf94753b112"),
                            Text = "TestBank is not my main servicing bank"
                        },
                        new
                        {
                            Id = new Guid("1a65e090-bec7-4388-a9dc-521ee062fc25"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("786cef88-a6ac-42e3-994c-e7eed39201a5"),
                            Text = "A"
                        },
                        new
                        {
                            Id = new Guid("372d0d01-ca28-4fcd-8395-5ffcfe8c9ce1"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("786cef88-a6ac-42e3-994c-e7eed39201a5"),
                            Text = "B"
                        },
                        new
                        {
                            Id = new Guid("56b5054b-565a-4ea5-92b9-a4db8c2e6ba3"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("786cef88-a6ac-42e3-994c-e7eed39201a5"),
                            Text = "C"
                        },
                        new
                        {
                            Id = new Guid("a640a29e-89be-4ad1-9b13-b46035d724ef"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("f97771a3-f1ad-40ce-b113-2eed16bc4a3d"),
                            Text = "A"
                        },
                        new
                        {
                            Id = new Guid("97f2f831-2c0d-4717-8337-d24d2710ecdd"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("f97771a3-f1ad-40ce-b113-2eed16bc4a3d"),
                            Text = "B"
                        },
                        new
                        {
                            Id = new Guid("48c526ef-0970-4e7c-b0fb-0f0ef7770c67"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("f97771a3-f1ad-40ce-b113-2eed16bc4a3d"),
                            Text = "C"
                        },
                        new
                        {
                            Id = new Guid("fc61593b-297f-48f5-b626-8b8c1496b095"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("1e82d528-4898-4c9e-87fb-16c0fdb9843e"),
                            Text = "A"
                        },
                        new
                        {
                            Id = new Guid("c3f46f23-0b18-4fe7-a00c-5084afd4b032"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("1e82d528-4898-4c9e-87fb-16c0fdb9843e"),
                            Text = "B"
                        },
                        new
                        {
                            Id = new Guid("a0d5d390-f70e-43ae-8744-a4762a6a8a0e"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("1e82d528-4898-4c9e-87fb-16c0fdb9843e"),
                            Text = "C"
                        },
                        new
                        {
                            Id = new Guid("10c77e0c-b471-47c6-bea7-556d5c88eed7"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("6902a89e-e11c-4800-99d6-b51f66f8ca54"),
                            Text = "A"
                        },
                        new
                        {
                            Id = new Guid("0c223fee-5e8e-42b9-85cc-5eae00291d47"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("6902a89e-e11c-4800-99d6-b51f66f8ca54"),
                            Text = "B"
                        },
                        new
                        {
                            Id = new Guid("5d1ff7f7-2a7d-420c-955e-4fccf5589668"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            QuestionId = new Guid("6902a89e-e11c-4800-99d6-b51f66f8ca54"),
                            Text = "C"
                        });
                });

            modelBuilder.Entity("AlphaMetrixForms.Data.Entities.OptionQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultipleAnswerAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("OptionQuestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("02627001-cae2-4189-a774-5f2b1876f37c"),
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 237, DateTimeKind.Utc).AddTicks(9156),
                            FormId = new Guid("8a50ab5f-0eb5-4eaa-916e-dc241a19a3ed"),
                            IsDeleted = false,
                            IsMultipleAnswerAllowed = false,
                            IsRequired = true,
                            OrderNumber = 5,
                            Text = "Please choose for how long have you been a customer of TestBank:"
                        },
                        new
                        {
                            Id = new Guid("29413352-774c-4cf4-8093-c0b733a95194"),
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 238, DateTimeKind.Utc).AddTicks(627),
                            FormId = new Guid("8a50ab5f-0eb5-4eaa-916e-dc241a19a3ed"),
                            IsDeleted = false,
                            IsMultipleAnswerAllowed = true,
                            IsRequired = true,
                            OrderNumber = 6,
                            Text = "Which products of TestBank are you using:"
                        },
                        new
                        {
                            Id = new Guid("69b16a6e-75c5-456a-ac2b-bdf94753b112"),
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 238, DateTimeKind.Utc).AddTicks(658),
                            FormId = new Guid("8a50ab5f-0eb5-4eaa-916e-dc241a19a3ed"),
                            IsDeleted = false,
                            IsMultipleAnswerAllowed = false,
                            IsRequired = false,
                            OrderNumber = 7,
                            Text = "Are you considering changing TestBank as your servicing bank:"
                        },
                        new
                        {
                            Id = new Guid("786cef88-a6ac-42e3-994c-e7eed39201a5"),
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 238, DateTimeKind.Utc).AddTicks(669),
                            FormId = new Guid("eff4ce9b-6a32-47a4-8e5e-d7d89ca18446"),
                            IsDeleted = false,
                            IsMultipleAnswerAllowed = true,
                            IsRequired = true,
                            OrderNumber = 4,
                            Text = "Q4:"
                        },
                        new
                        {
                            Id = new Guid("f97771a3-f1ad-40ce-b113-2eed16bc4a3d"),
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 238, DateTimeKind.Utc).AddTicks(681),
                            FormId = new Guid("eff4ce9b-6a32-47a4-8e5e-d7d89ca18446"),
                            IsDeleted = false,
                            IsMultipleAnswerAllowed = false,
                            IsRequired = true,
                            OrderNumber = 3,
                            Text = "Q3:"
                        },
                        new
                        {
                            Id = new Guid("1e82d528-4898-4c9e-87fb-16c0fdb9843e"),
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 238, DateTimeKind.Utc).AddTicks(692),
                            FormId = new Guid("eff4ce9b-6a32-47a4-8e5e-d7d89ca18446"),
                            IsDeleted = false,
                            IsMultipleAnswerAllowed = true,
                            IsRequired = false,
                            OrderNumber = 2,
                            Text = "Q2:"
                        },
                        new
                        {
                            Id = new Guid("6902a89e-e11c-4800-99d6-b51f66f8ca54"),
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 238, DateTimeKind.Utc).AddTicks(701),
                            FormId = new Guid("eff4ce9b-6a32-47a4-8e5e-d7d89ca18446"),
                            IsDeleted = false,
                            IsMultipleAnswerAllowed = false,
                            IsRequired = false,
                            OrderNumber = 1,
                            Text = "Q1:"
                        });
                });

            modelBuilder.Entity("AlphaMetrixForms.Data.Entities.OptionQuestionAnswer", b =>
                {
                    b.Property<Guid>("OptionQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OptionQuestionId", "ResponseId");

                    b.HasIndex("ResponseId");

                    b.ToTable("OptionQuestionAnswers");
                });

            modelBuilder.Entity("AlphaMetrixForms.Data.Entities.Response", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("AlphaMetrixForms.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("AlphaMetrixForms.Data.Entities.TextQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLongAnswer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("TextQuestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("94fc2049-4b7b-4fbc-9991-ad4abb37b03d"),
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 237, DateTimeKind.Utc).AddTicks(3860),
                            FormId = new Guid("8a50ab5f-0eb5-4eaa-916e-dc241a19a3ed"),
                            IsDeleted = false,
                            IsLongAnswer = false,
                            IsRequired = true,
                            OrderNumber = 1,
                            Text = "Please enter your name:"
                        },
                        new
                        {
                            Id = new Guid("ff8f434b-e6c0-4e29-a79d-994dd4e7c21c"),
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 237, DateTimeKind.Utc).AddTicks(3937),
                            FormId = new Guid("8a50ab5f-0eb5-4eaa-916e-dc241a19a3ed"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = true,
                            OrderNumber = 8,
                            Text = "Are you satisfied with the services provided by TestBank in overall:"
                        },
                        new
                        {
                            Id = new Guid("082e946c-a3d2-474f-8765-e933d78e9832"),
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 237, DateTimeKind.Utc).AddTicks(3943),
                            FormId = new Guid("8a50ab5f-0eb5-4eaa-916e-dc241a19a3ed"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = false,
                            OrderNumber = 9,
                            Text = "Here you can share feedback for the form:"
                        },
                        new
                        {
                            Id = new Guid("1ea514f3-b6b2-4ada-9a69-1d68cad75349"),
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 237, DateTimeKind.Utc).AddTicks(3946),
                            FormId = new Guid("b41ba95b-e19f-4ed6-b443-6c85cf9b5c3d"),
                            IsDeleted = false,
                            IsLongAnswer = false,
                            IsRequired = false,
                            OrderNumber = 4,
                            Text = "Q4:"
                        },
                        new
                        {
                            Id = new Guid("00db1b7c-9616-4b03-9435-a3c915f96412"),
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 237, DateTimeKind.Utc).AddTicks(3979),
                            FormId = new Guid("b41ba95b-e19f-4ed6-b443-6c85cf9b5c3d"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = false,
                            OrderNumber = 2,
                            Text = "Q2:"
                        },
                        new
                        {
                            Id = new Guid("1a7e99da-687f-4fc3-b9a8-abed0adb5526"),
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 237, DateTimeKind.Utc).AddTicks(3983),
                            FormId = new Guid("b41ba95b-e19f-4ed6-b443-6c85cf9b5c3d"),
                            IsDeleted = false,
                            IsLongAnswer = false,
                            IsRequired = true,
                            OrderNumber = 1,
                            Text = "Q1:"
                        },
                        new
                        {
                            Id = new Guid("a25cc7e3-2298-4fa6-8dd8-e3147a64464a"),
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 237, DateTimeKind.Utc).AddTicks(3986),
                            FormId = new Guid("b41ba95b-e19f-4ed6-b443-6c85cf9b5c3d"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = true,
                            OrderNumber = 3,
                            Text = "Q3:"
                        });
                });

            modelBuilder.Entity("AlphaMetrixForms.Data.Entities.TextQuestionAnswer", b =>
                {
                    b.Property<Guid>("TextQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("TextQuestionId", "ResponseId");

                    b.HasIndex("ResponseId");

                    b.ToTable("TextQuestionAnswers");
                });

            modelBuilder.Entity("AlphaMetrixForms.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e067376a-2d4d-416f-b3a3-2f37dae1ad8f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b297eef1-9015-4fb2-9a37-917d2921d592",
                            CreatedOn = new DateTime(2020, 5, 28, 14, 50, 57, 225, DateTimeKind.Utc).AddTicks(6599),
                            Email = "user1@user.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@USER.COM",
                            NormalizedUserName = "TESTUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEFB8gzMgvtNAe5W3GL18s0Uh81XRyJwoznU5vvabJ2UfgBk6exAV7Rb7UlDUN46YbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "DC6E275DD1E24957A7781D42BB68293B",
                            TwoFactorEnabled = false,
                            UserName = "TestUser"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AlphaMetrixForms.Data.Entities.DocumentQuestion", b =>
                {
                    b.HasOne("AlphaMetrixForms.Data.Entities.Form", "Form")
                        .WithMany("DocumentQuestions")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlphaMetrixForms.Data.Entities.DocumentQuestionAnswer", b =>
                {
                    b.HasOne("AlphaMetrixForms.Data.Entities.DocumentQuestion", "DocumentQuestion")
                        .WithMany("Answers")
                        .HasForeignKey("DocumentQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlphaMetrixForms.Data.Entities.Response", "Response")
                        .WithMany("DocumentQuestionAnswers")
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlphaMetrixForms.Data.Entities.Form", b =>
                {
                    b.HasOne("AlphaMetrixForms.Data.Entities.User", "Owner")
                        .WithMany("Forms")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlphaMetrixForms.Data.Entities.Option", b =>
                {
                    b.HasOne("AlphaMetrixForms.Data.Entities.OptionQuestion", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlphaMetrixForms.Data.Entities.OptionQuestion", b =>
                {
                    b.HasOne("AlphaMetrixForms.Data.Entities.Form", "Form")
                        .WithMany("OptionQuestions")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlphaMetrixForms.Data.Entities.OptionQuestionAnswer", b =>
                {
                    b.HasOne("AlphaMetrixForms.Data.Entities.OptionQuestion", "OptionQuestion")
                        .WithMany("Answers")
                        .HasForeignKey("OptionQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlphaMetrixForms.Data.Entities.Response", "Response")
                        .WithMany("OptionQuestionAnswers")
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlphaMetrixForms.Data.Entities.Response", b =>
                {
                    b.HasOne("AlphaMetrixForms.Data.Entities.Form", "Form")
                        .WithMany("Responses")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("AlphaMetrixForms.Data.Entities.TextQuestion", b =>
                {
                    b.HasOne("AlphaMetrixForms.Data.Entities.Form", "Form")
                        .WithMany("TextQuestions")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlphaMetrixForms.Data.Entities.TextQuestionAnswer", b =>
                {
                    b.HasOne("AlphaMetrixForms.Data.Entities.Response", "Response")
                        .WithMany("TextQuestionAnswers")
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlphaMetrixForms.Data.Entities.TextQuestion", "TextQuestion")
                        .WithMany("Answers")
                        .HasForeignKey("TextQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("AlphaMetrixForms.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("AlphaMetrixForms.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("AlphaMetrixForms.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("AlphaMetrixForms.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlphaMetrixForms.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("AlphaMetrixForms.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
